import type { PaginatedDocs } from '../../../database/types.js';
import type { GeneratedTypes, Payload } from '../../../index.js';
import type { Document, PayloadRequestWithData, RequestContext, Where } from '../../../types/index.js';
export type Options<T extends keyof GeneratedTypes['collections']> = {
    collection: T;
    /**
     * context, which will then be passed to req.context, which can be read by hooks
     */
    context?: RequestContext;
    currentDepth?: number;
    depth?: number;
    disableErrors?: boolean;
    draft?: boolean;
    fallbackLocale?: GeneratedTypes['locale'];
    limit?: number;
    locale?: 'all' | GeneratedTypes['locale'];
    overrideAccess?: boolean;
    page?: number;
    pagination?: boolean;
    req?: PayloadRequestWithData;
    showHiddenFields?: boolean;
    sort?: string;
    user?: Document;
    where?: Where;
};
export default function findLocal<T extends keyof GeneratedTypes['collections']>(payload: Payload, options: Options<T>): Promise<PaginatedDocs<GeneratedTypes['collections'][T]>>;
//# sourceMappingURL=find.d.ts.map