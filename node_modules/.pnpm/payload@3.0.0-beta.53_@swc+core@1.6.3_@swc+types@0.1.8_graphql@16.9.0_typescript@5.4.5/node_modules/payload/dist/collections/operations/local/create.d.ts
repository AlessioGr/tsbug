import type { MarkOptional } from 'ts-essentials';
import type { GeneratedTypes, Payload } from '../../../index.js';
import type { Document, PayloadRequestWithData, RequestContext } from '../../../types/index.js';
import type { File } from '../../../uploads/types.js';
export type Options<TSlug extends keyof GeneratedTypes['collections']> = {
    collection: TSlug;
    /**
     * context, which will then be passed to req.context, which can be read by hooks
     */
    context?: RequestContext;
    data: MarkOptional<GeneratedTypes['collections'][TSlug], 'createdAt' | 'id' | 'sizes' | 'updatedAt'>;
    depth?: number;
    disableVerificationEmail?: boolean;
    draft?: boolean;
    fallbackLocale?: GeneratedTypes['locale'];
    file?: File;
    filePath?: string;
    locale?: GeneratedTypes['locale'];
    overrideAccess?: boolean;
    overwriteExistingFiles?: boolean;
    req?: PayloadRequestWithData;
    showHiddenFields?: boolean;
    user?: Document;
};
export default function createLocal<TSlug extends keyof GeneratedTypes['collections']>(payload: Payload, options: Options<TSlug>): Promise<GeneratedTypes['collections'][TSlug]>;
//# sourceMappingURL=create.d.ts.map