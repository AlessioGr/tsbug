import type { PaginatedDocs } from '../../../database/types.js';
import type { GeneratedTypes, Payload, RequestContext } from '../../../index.js';
import type { Document, PayloadRequestWithData, Where } from '../../../types/index.js';
import type { TypeWithVersion } from '../../../versions/types.js';
export type Options<T extends keyof GeneratedTypes['globals']> = {
    context?: RequestContext;
    depth?: number;
    fallbackLocale?: GeneratedTypes['locale'];
    limit?: number;
    locale?: 'all' | GeneratedTypes['locale'];
    overrideAccess?: boolean;
    page?: number;
    req?: PayloadRequestWithData;
    showHiddenFields?: boolean;
    slug: T;
    sort?: string;
    user?: Document;
    where?: Where;
};
export default function findVersionsLocal<T extends keyof GeneratedTypes['globals']>(payload: Payload, options: Options<T>): Promise<PaginatedDocs<TypeWithVersion<GeneratedTypes['globals'][T]>>>;
//# sourceMappingURL=findVersions.d.ts.map