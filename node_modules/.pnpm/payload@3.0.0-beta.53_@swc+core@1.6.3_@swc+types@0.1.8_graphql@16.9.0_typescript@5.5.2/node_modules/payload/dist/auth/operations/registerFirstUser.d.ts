import type { MarkOptional } from 'ts-essentials';
import type { Collection } from '../../collections/config/types.js';
import type { GeneratedTypes } from '../../index.js';
import type { PayloadRequestWithData } from '../../types/index.js';
export type Arguments<T extends {
    [field: number | string | symbol]: unknown;
}> = {
    collection: Collection;
    data: MarkOptional<T, 'createdAt' | 'id' | 'sizes' | 'updatedAt'> & {
        email: string;
        password: string;
    };
    req: PayloadRequestWithData;
};
export type Result<T> = {
    exp?: number;
    token?: string;
    user?: T;
};
export declare const registerFirstUserOperation: <TSlug extends string | number | symbol>(args: Arguments<GeneratedTypes['collections'][TSlug]>) => Promise<Result<GeneratedTypes['collections'][TSlug]>>;
//# sourceMappingURL=registerFirstUser.d.ts.map