{"version":3,"sources":["../../../src/auth/operations/me.ts"],"sourcesContent":["import jwt from 'jsonwebtoken'\n\nimport type { Collection } from '../../collections/config/types.js'\nimport type { PayloadRequestWithData } from '../../types/index.js'\nimport type { ClientUser, User } from '../types.js'\n\nexport type MeOperationResult = {\n  collection?: string\n  exp?: number\n  token?: string\n  user?: ClientUser\n}\n\nexport type Arguments = {\n  collection: Collection\n  currentToken?: string\n  req: PayloadRequestWithData\n}\n\nexport const meOperation = async ({\n  collection,\n  currentToken,\n  req,\n}: Arguments): Promise<MeOperationResult> => {\n  let result: MeOperationResult = {\n    user: null,\n  }\n\n  if (req.user) {\n    const { pathname } = req\n    const isGraphQL = pathname === `/api${req.payload.config.routes.graphQL}`\n\n    const user = (await req.payload.findByID({\n      id: req.user.id,\n      collection: collection.config.slug,\n      depth: isGraphQL ? 0 : collection.config.auth.depth,\n      overrideAccess: false,\n      req,\n      showHiddenFields: false,\n    })) as User\n\n    if (req.user.collection !== collection.config.slug) {\n      return {\n        user: null,\n      }\n    }\n\n    delete user.collection\n\n    result = {\n      collection: req.user.collection,\n      user,\n    }\n\n    if (currentToken) {\n      const decoded = jwt.decode(currentToken) as jwt.JwtPayload\n      if (decoded) result.exp = decoded.exp\n      result.token = currentToken\n    }\n  }\n\n  // /////////////////////////////////////\n  // After Me - Collection\n  // /////////////////////////////////////\n\n  await collection.config.hooks.afterMe.reduce(async (priorHook, hook) => {\n    await priorHook\n\n    result =\n      (await hook({\n        collection: collection?.config,\n        context: req.context,\n        req,\n        response: result,\n      })) || result\n  }, Promise.resolve())\n\n  return result\n}\n"],"names":["jwt","meOperation","collection","currentToken","req","result","user","pathname","isGraphQL","payload","config","routes","graphQL","findByID","id","slug","depth","auth","overrideAccess","showHiddenFields","decoded","decode","exp","token","hooks","afterMe","reduce","priorHook","hook","context","response","Promise","resolve"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA,OAAOA,SAAS,eAAc;AAmB9B,OAAO,MAAMC,cAAc,OAAO,EAChCC,UAAU,EACVC,YAAY,EACZC,GAAG,EACO;IACV,IAAIC,SAA4B;QAC9BC,MAAM;IACR;IAEA,IAAIF,IAAIE,IAAI,EAAE;QACZ,MAAM,EAAEC,QAAQ,EAAE,GAAGH;QACrB,MAAMI,YAAYD,aAAa,CAAC,IAAI,EAAEH,IAAIK,OAAO,CAACC,MAAM,CAACC,MAAM,CAACC,OAAO,CAAC,CAAC;QAEzE,MAAMN,OAAQ,MAAMF,IAAIK,OAAO,CAACI,QAAQ,CAAC;YACvCC,IAAIV,IAAIE,IAAI,CAACQ,EAAE;YACfZ,YAAYA,WAAWQ,MAAM,CAACK,IAAI;YAClCC,OAAOR,YAAY,IAAIN,WAAWQ,MAAM,CAACO,IAAI,CAACD,KAAK;YACnDE,gBAAgB;YAChBd;YACAe,kBAAkB;QACpB;QAEA,IAAIf,IAAIE,IAAI,CAACJ,UAAU,KAAKA,WAAWQ,MAAM,CAACK,IAAI,EAAE;YAClD,OAAO;gBACLT,MAAM;YACR;QACF;QAEA,OAAOA,KAAKJ,UAAU;QAEtBG,SAAS;YACPH,YAAYE,IAAIE,IAAI,CAACJ,UAAU;YAC/BI;QACF;QAEA,IAAIH,cAAc;YAChB,MAAMiB,UAAUpB,IAAIqB,MAAM,CAAClB;YAC3B,IAAIiB,SAASf,OAAOiB,GAAG,GAAGF,QAAQE,GAAG;YACrCjB,OAAOkB,KAAK,GAAGpB;QACjB;IACF;IAEA,wCAAwC;IACxC,wBAAwB;IACxB,wCAAwC;IAExC,MAAMD,WAAWQ,MAAM,CAACc,KAAK,CAACC,OAAO,CAACC,MAAM,CAAC,OAAOC,WAAWC;QAC7D,MAAMD;QAENtB,SACE,AAAC,MAAMuB,KAAK;YACV1B,YAAYA,YAAYQ;YACxBmB,SAASzB,IAAIyB,OAAO;YACpBzB;YACA0B,UAAUzB;QACZ,MAAOA;IACX,GAAG0B,QAAQC,OAAO;IAElB,OAAO3B;AACT,EAAC"}