import type { MarkOptional } from 'ts-essentials';
import type { GeneratedTypes } from '../../index.js';
import type { PayloadRequestWithData } from '../../types/index.js';
import type { Collection } from '../config/types.js';
export type CreateUpdateType = {
    [field: number | string | symbol]: unknown;
};
export type Arguments<T extends CreateUpdateType> = {
    autosave?: boolean;
    collection: Collection;
    data: MarkOptional<T, 'createdAt' | 'id' | 'sizes' | 'updatedAt'>;
    depth?: number;
    disableVerificationEmail?: boolean;
    draft?: boolean;
    overrideAccess?: boolean;
    overwriteExistingFiles?: boolean;
    req: PayloadRequestWithData;
    showHiddenFields?: boolean;
};
export declare const createOperation: <TSlug extends string | number | symbol>(incomingArgs: Arguments<GeneratedTypes['collections'][TSlug]>) => Promise<GeneratedTypes['collections'][TSlug]>;
//# sourceMappingURL=create.d.ts.map